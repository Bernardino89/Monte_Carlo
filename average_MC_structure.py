#! /usr/bin/env python

"""
@author: bernardino.tirri@chimieparistech.psl.eu
"""

# The program allows to obtain an average structure generated by LAMMPS, the output file in z-matrix format
# Before starting the program, convert all .xyz files to .fh format using the obabel tool with the following command:
#
#                           for i in $(ls *com); do obabel  -ixyz -ofh  $i  > $i.fh  ; done
#
#
# Remember, the program must be launched within the folder where the .fh files are located.
#
#
# in the folder must to be only the file to analyze
# the program determine the bond lenght alternation and compute the average in basis of the file number
# 
# argv 1 -->  total number of atoms such as 120
#
# 
# usage
# python2.7 average_MC_structure.py 120

# read all files .com


from sys import *
from math import pi,sqrt,exp,log
import os, string
from operator import itemgetter
import shutil
import os.path
import numpy as np
import sys
import subprocess




narg= 1 + 0


jump= int(sys.argv[1])

# generate the full path for the current directory
full_path = os.path.realpath(__file__)
#print (full_path)

path, filename = os.path.split(full_path)
#print(path + ' --> ' + filename + "\n")


# aprire tutti i file z matrix e metterli in una lista 


files = []

for i in os.listdir(path):
    if i.endswith(".fh"):
        files.append(i)
#print "the file are equal" ,files
average = len(files)
#print "the file number is", average

atoms=[]
bond=[]
b=[]
angle=[]
a=[]
d=[]
dihedral=[]

for k in files :

    input=open(k,"r")	
    linee=input.readlines()

    for n, raw in enumerate(linee) :                    
            rig=raw.split()

#            if n >1:
#                Atoms=rig[0].split()[0]
#                atoms.append(Atoms)

            if n >= 1:
                Bond=rig[1].split()[0]
                B=float(rig[2].split()[0])
                b.append(B)
                bond.append(Bond)
		#print b

            if n >= 2:
                Angle=rig[3].split()[0]
                A=float(rig[4].split()[0])
                a.append(A)
                angle.append(Angle)
            
            if n >= 3:
                Dihedral=rig[5].split()[0]
                D=float(rig[6].split()[0])
                d.append(D)
                dihedral.append(Dihedral)


#################### first cycle over the bond lenght ########################################


nb=[]              # means new bond 
jump1=jump-1       # because the number of bond in one .fh file is equal to jump - 1

for i in range (0,len(b)):

#    print i
    total = 0.
    for j in range (0,len(b),jump1):
#        print i, j
        total+=b[i]/average

    nb.append(total)

#print nb,'\n'



####################### second cycle over the angles ################################


na=[]              # means new angle 
jump2=jump-2       # because the number of bond in one .fh file is equal to jump - 2

for i in range (0,len(a)):

#    print i
    total = 0.
    for j in range (0,len(a),jump1):
#        print i, j
        total+=a[i]/average

    na.append(total)

#print na, '\n'


####################### third cycle over the dihedral angles ########################


nd=[]              # means new dihedral angle 
jump2=jump-3       # because the number of bond in one .fh file is equal to jump - 3

for i in range (0,len(d)):

#    print i
    total = 0.
    for j in range (0,len(d),jump1):
#        print i, j
        total+=d[i]/average

    nd.append(total)


Atoms=[]
for i in atoms[:jump]:
    Atoms.append(i)
#print Atoms
#print len(Atoms)

Bon=[]
for i in bond[:jump-1]:
    Bon.append(i)
#print Bon
#print len(Bon)

An=[]
for i in angle[:jump-2]:
    An.append(i)
#print An
#print len(An)

Dh=[]
for i in dihedral[:jump-3]:
    Dh.append(i)


Bon.insert(0,None)
nb.insert(0,None)
An.insert(0,None)
An.insert(0,None)
na.insert(0,None)
na.insert(0,None)
Dh.insert(0,None)
Dh.insert(0,None)
Dh.insert(0,None)
nd.insert(0,None)
nd.insert(0,None)
nd.insert(0,None)

with open("z-matrix1.txt","w") as zmat1:
    #zmat1.write('\n'.join('{}'.format(jump)))
    zmat1.write(str(jump) + '\n')
    zmat1.write('average configuration from Monte Carlo' + '\n')
    zmat1.write('\n'.join('{:10} {:10} {:10} {:10} {:10} {:10} {:10}'.format((a),(b),(c),(d),(e),(f),(g)) for a,b,c,d,e,f,g in zip(Atoms,Bon,nb,An,na,Dh,nd)))




subprocess.call(['sed','s/None//g', 'z-matrix1.txt'])

os.remove("z-matrix1.txt")

